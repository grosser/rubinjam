#!/usr/bin/env ruby
# generated by rubinjam v0.1.0 -- https://github.com/grosser/rubinjam
module Rubinjam
  LIBRARIES = {
    "rubinjam/version" => "module Rubinjam\n  VERSION = \"0.1.0\"\nend\n",
    "rubinjam" => "require \"tmpdir\"\nrequire \"bundler\"\nrequire \"rubinjam/version\"\n\nmodule Rubinjam\n  class << self\n    def pack(dir)\n      Dir.chdir(dir) do\n        binaries = Dir[\"bin/*\"]\n        raise \"No binary found in ./bin\" if binaries.size == 0\n        raise \"Can only pack exactly 1 binary, found \#{binaries.join(\",\")} in ./bin\" unless binaries.size == 1\n        content = environment + File.read(binaries.first)\n        [File.basename(binaries.first), content]\n      end\n    end\n\n    def pack_gem(gem, version)\n      Dir.mktmpdir do |dir|\n        Dir.chdir(dir) do\n          # unpack\n          command = [\"gem\", \"unpack\", gem]\n          command << \"-v\" << version if version\n          IO.popen(command).read\n\n          # bundle\n          Dir.chdir(Dir[\"*\"].first) { Rubinjam.pack(Dir.pwd) }\n        end\n      end\n    end\n\n    private\n\n    def libraries\n      libs_from_paths([\"lib\"]).merge(gem_libraries)\n    end\n\n    def gem_libraries\n      return {} unless gemspec = Dir[\"*.gemspec\"].first\n      return {} unless File.read(gemspec) =~ /add_(runtime_)?dependency/\n\n      Dir.mktmpdir do |dir|\n        sh \"cp -R . \#{dir}/\"\n        Dir.chdir(dir) do\n          write \"Gemfile\", <<-RUBY.gsub(/^            /, \"\")\n            source \"https://rubygems.org\"\n            gemspec\n          RUBY\n          sh(\"rm -f Gemfile.lock\")\n          bundle = \"bundle install --quiet --path bundle\"\n          sh(\"\#{bundle} --local || \#{bundle}\")\n          paths = sh(\"bundle exec ruby -e 'puts $LOAD_PATH'\").split(\"\\n\")\n          paths = paths.grep(%r{/gems/}).reject { |r| r =~ %r{/gems/bundler-\\d} }\n          libs_from_paths(paths)\n        end\n      end\n    end\n\n    def libs_from_paths(paths)\n      paths.select { |p| File.directory?(p) }.inject({}) do |all, path|\n        Dir.chdir path do\n          all.merge!(Hash[Dir[\"**/*.rb\"].map { |f| [f.sub(/\\.rb$/, \"\"), File.read(f)] }])\n        end\n      end\n    end\n\n    def sh(command, options={})\n      result = Bundler.with_clean_env { `\#{command} 2>/dev/null` }\n      raise \"\#{options[:fail] ? \"SUCCESS\" : \"FAIL\"} \#{command}\\n\#{result}\" if $?.success? == !!options[:fail]\n      result\n    end\n\n    def write(file, content)\n      FileUtils.mkdir_p(File.dirname(file))\n      File.open(file, \"w\") { |f| f.write content }\n    end\n\n    def environment\n      <<-RUBY.gsub(/^        /, \"\")\n        #!/usr/bin/env ruby\n        # generated by rubinjam v\#{VERSION} -- https://github.com/grosser/rubinjam\n        module Rubinjam\n          LIBRARIES = {\n            \#{libraries.map { |name,content| \"\#{name.inspect} => \#{content.inspect}\" }.join(\",\\n    \")}\n          }\n\n          ROOT = File.expand_path(\"../\", __FILE__) << \"/lib/\"\n        end\n\n        Module.class_eval do\n          alias autoload_without_rubinjam autoload\n          def autoload(const, file)\n            if Rubinjam::LIBRARIES[file]\n              require file\n            else\n              autoload_without_rubinjam(const, file)\n            end\n          end\n        end\n\n        alias autoload_without_rubinjam autoload\n        def autoload(const, file)\n          if Rubinjam::LIBRARIES[file]\n            require file\n          else\n            autoload_without_rubinjam(const, file)\n          end\n        end\n\n        def require(file)\n          normalized_file = file.sub(Rubinjam::ROOT, \"\")\n          if code = Rubinjam::LIBRARIES[normalized_file]\n            return if code == :loaded\n            eval(code, TOPLEVEL_BINDING, \"rubinjam/\\\#{normalized_file}.rb\")\n            Rubinjam::LIBRARIES[normalized_file] = :loaded\n          else\n            super\n          end\n        end\n      RUBY\n    end\n  end\nend\n"
  }

  ROOT = File.expand_path("../", __FILE__) << "/lib/"
end

Module.class_eval do
  alias autoload_without_rubinjam autoload
  def autoload(const, file)
    if Rubinjam::LIBRARIES[file]
      require file
    else
      autoload_without_rubinjam(const, file)
    end
  end
end

alias autoload_without_rubinjam autoload
def autoload(const, file)
  if Rubinjam::LIBRARIES[file]
    require file
  else
    autoload_without_rubinjam(const, file)
  end
end

def require(file)
  normalized_file = file.sub(Rubinjam::ROOT, "")
  if code = Rubinjam::LIBRARIES[normalized_file]
    return if code == :loaded
    eval(code, TOPLEVEL_BINDING, "rubinjam/#{normalized_file}.rb")
    Rubinjam::LIBRARIES[normalized_file] = :loaded
  else
    super
  end
end
#!/usr/bin/env ruby
require 'optparse'

$LOAD_PATH << File.join(File.dirname(__FILE__), '..', 'lib')
require 'rubinjam'

OptionParser.new do |opts|
  opts.banner = <<BANNER
Rubinjam

Jam a gem into a universal binary that works with any ruby

Usage:
    rubinjam # convert current directory into a binary

Options:
BANNER
  opts.on("-h", "--help","Show this.") { puts opts; exit }
  opts.on('-v', '--version','Show Version'){ require 'rubinjam/version'; puts Rubinjam::VERSION; exit}
end.parse!

name, content = Rubinjam.pack(Dir.pwd)
File.open(name, 'w') { |f| f.write content }
`chmod +x #{name}`
raise "Unable to add execution bit" unless $?.success?
